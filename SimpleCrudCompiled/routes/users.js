// Generated by CoffeeScript 1.3.3
(function() {
  var Users, db, newConn, tds,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  db = require('../db')();

  tds = require('tds');

  newConn = function() {
    var conn;
    conn = new tds.Connection({
      host: db.mssql.host,
      port: db.mssql.port,
      userName: db.mssql.userName,
      password: db.mssql.password,
      database: db.mssql.database
    });
    return conn;
  };

  Users = (function(_super) {

    __extends(Users, _super);

    function Users() {
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.routes = function(app) {
      /* List all users
      */
      app.get('/users/list', Users.signed, function(req, res) {
        var conn, data;
        data = [];
        conn = newConn();
        return conn.connect(function() {
          var stmt,
            _this = this;
          stmt = conn.createStatement('SELECT users_id, login, pass FROM users');
          stmt.on('row', function(row) {
            return data.push({
              users_id: row.getValue('users_id'),
              login: row.getValue('login'),
              pass: row.getValue('pass')
            });
          });
          stmt.on('done', function() {
            console.log(data);
            return res.render('users/list', {
              users: data
            });
          });
          return stmt.execute();
        });
      });
      /* Add user interface
      */

      app.get('/users/add', Users.signed, function(req, res) {
        return res.render('users/add');
      });
      /* Edit user interface
      */

      app.get('/users/edit/:id', Users.signed, function(req, res) {
        var conn, data;
        data = {};
        conn = newConn();
        return conn.connect(function() {
          var stmt,
            _this = this;
          stmt = conn.createStatement('SELECT users_id, login, pass FROM users where users_id = ' + req.params.id);
          stmt.on('row', function(row) {
            return data = {
              users_id: row.getValue('users_id'),
              login: row.getValue('login'),
              pass: row.getValue('pass')
            };
          });
          stmt.on('done', function() {
            console.log(data);
            return res.render('users/edit', {
              user: data
            });
          });
          return stmt.execute();
        });
      });
      /* Save user
      */

      app.post('/users/save', Users.signed, function(req, res) {
        var conn, id, login, pass, _ref;
        login = req.body.login;
        pass = req.body.password;
        id = (_ref = req.body.id) != null ? _ref : 0;
        conn = newConn();
        return conn.connect(function() {
          var stmt,
            _this = this;
          if (id) {
            console.log("UPDATE users set login = '" + login + "', pass = '" + pass + "' where users_id = '" + id + "'");
            stmt = conn.createStatement("UPDATE users set login = '" + login + "', pass = '" + pass + "' where users_id = '" + id + "'");
          } else {
            stmt = conn.createStatement("INSERT INTO users(login, pass) VALUES ('" + login + "', '" + pass + "')");
          }
          stmt.on('done', function() {
            return res.redirect('/users/list');
          });
          return stmt.execute();
        });
      });
      /* Delete user
      */

      return app.get('/users/delete/:id', Users.signed, function(req, res) {
        var conn;
        conn = newConn();
        return conn.connect(function() {
          var stmt,
            _this = this;
          stmt = conn.createStatement('DELETE FROM users where users_id = ' + req.params.id);
          stmt.on('done', function() {
            return res.redirect('/users/list');
          });
          return stmt.execute();
        });
      });
    };

    return Users;

  }).call(this, require('../api').Api);

  module.exports = Users.routes;

}).call(this);
